/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataFileService } from "../dataFile.service";
import { DataFileCreateInput } from "./DataFileCreateInput";
import { DataFile } from "./DataFile";
import { DataFileFindManyArgs } from "./DataFileFindManyArgs";
import { DataFileWhereUniqueInput } from "./DataFileWhereUniqueInput";
import { DataFileUpdateInput } from "./DataFileUpdateInput";

export class DataFileControllerBase {
  constructor(protected readonly service: DataFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataFile })
  async createDataFile(
    @common.Body() data: DataFileCreateInput
  ): Promise<DataFile> {
    return await this.service.createDataFile({
      data: data,
      select: {
        createdAt: true,
        fileContent: true,
        filename: true,
        fileType: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataFile] })
  @ApiNestedQuery(DataFileFindManyArgs)
  async dataFiles(@common.Req() request: Request): Promise<DataFile[]> {
    const args = plainToClass(DataFileFindManyArgs, request.query);
    return this.service.dataFiles({
      ...args,
      select: {
        createdAt: true,
        fileContent: true,
        filename: true,
        fileType: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataFile(
    @common.Param() params: DataFileWhereUniqueInput
  ): Promise<DataFile | null> {
    const result = await this.service.dataFile({
      where: params,
      select: {
        createdAt: true,
        fileContent: true,
        filename: true,
        fileType: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataFile(
    @common.Param() params: DataFileWhereUniqueInput,
    @common.Body() data: DataFileUpdateInput
  ): Promise<DataFile | null> {
    try {
      return await this.service.updateDataFile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fileContent: true,
          filename: true,
          fileType: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataFile(
    @common.Param() params: DataFileWhereUniqueInput
  ): Promise<DataFile | null> {
    try {
      return await this.service.deleteDataFile({
        where: params,
        select: {
          createdAt: true,
          fileContent: true,
          filename: true,
          fileType: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
